/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from 'next/server';
import { handleAgentRequest } from '@/utils/agentHandler';
import connectDB from '@/connection/dbConn';
import Slide from '@/model/slide.model';
import SlideDeck from '@/model/slideDeck.model';

export async function POST(req: NextRequest) {
    try {
      await connectDB();
      const body = await req.json();
  
      const result = await handleAgentRequest(body, 'FirstSlideAgent', () => [
        body.theme,
        body.settings,
        body.audience,
        body.themeExample,
        body.topic
      ]) as string;
  
      console.log("Generated result:", result);
      const cleanedResult = result.replace(/```md|```/g, '').trim();
      const slides = cleanedResult.split(/^---$/gm);
      console.log(slides)
  
      const createdSlides = await Promise.all(
        slides.map(async (slides: string, index: number) => {
          return await Slide.create({
            slideIndex: index,
            contentMarkdown: slides.trim(),
            settings: body.settings,
            previousContent: body.topic || "Initial Slide",
            type: "first"
          });
        })
      );
  
      const newDeck = await SlideDeck.create({
        title: body.topic,
        description: body.description || `${body.topic} - autogenerated deck`,
        theme: body.theme,
        audience: body.audience,
        settings: body.settings || "none",
        content: result,
        slides: createdSlides.map(s => s._id)
      });
  
      return NextResponse.json({
        success: true,
        deckId: newDeck._id,
        slides: createdSlides,
        deck: newDeck
      }, { status: 201 });
  
    } catch (err: any) {
      console.error("Error creating first slide and deck:", err);
      return NextResponse.json({ success: false, error: err.message }, { status: 500 });
    }
  }
  
